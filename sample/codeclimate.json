[
    {
       "engine_name":"structure",
       "fingerprint":"2207d9ebb8dbf5b548f047d77d586939",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `useFavoriteArticleMutation` has 34 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/hooks/useFavoriteArticleMutation.js",
          "lines":{
             "begin":6,
             "end":47
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":816000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"e9ac82fe3bb77fd4e6988cab7615dd12",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_complexity",
       "content":{
          "body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
       },
       "description":"Function `makeServer` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
       "location":{
          "path":"src/server.js",
          "lines":{
             "begin":11,
             "end":282
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":250000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"1378e275bb75aad52f439174d506bfc4",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `routes` has 93 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/server.js",
          "lines":{
             "begin":144,
             "end":280
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":2232000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"45eee64386d47480a614049bea62e194",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Article` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Article.jsx",
          "lines":{
             "begin":5,
             "end":36
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":696000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"84440f7ece71a2e737326aca1ef74a03",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_complexity",
       "content":{
          "body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
       },
       "description":"Function `Editor` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Editor.jsx",
          "lines":{
             "begin":9,
             "end":97
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1050000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"217dbe2987ef080a0c7c7c4458a33a87",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Editor` has 82 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Editor.jsx",
          "lines":{
             "begin":9,
             "end":97
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1968000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"7718e40443872d9d6206425f23e1d13b",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_complexity",
       "content":{
          "body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
       },
       "description":"Function `Auth` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Auth.jsx",
          "lines":{
             "begin":8,
             "end":81
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":650000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"f6affc7755659b9ff01383023fbc4442",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Auth` has 66 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Auth.jsx",
          "lines":{
             "begin":8,
             "end":81
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1584000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"3b6d036f080808ccc5724890f5274380",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Home` has 67 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Home.jsx",
          "lines":{
             "begin":8,
             "end":81
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1608000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"0f477d79d20baeffe59356e403547778",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Settings` has 81 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":9,
             "end":98
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1944000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"08097faf0c9acca3aea732a6be0f6910",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Profile` has 66 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/pages/Profile.jsx",
          "lines":{
             "begin":7,
             "end":78
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1584000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"6246d9a503943de1d0efa8aecebf2776",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `App` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/App.jsx",
          "lines":{
             "begin":8,
             "end":40
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":744000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"060348c891db5c3dfad493909b97c970",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `ArticleMeta` has 34 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/components/ArticleMeta.jsx",
          "lines":{
             "begin":8,
             "end":44
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":816000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"1aae8b79cc012c8ab0f62efd263bf30b",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `FollowProfileButton` has 38 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/components/FollowProfileButton.jsx",
          "lines":{
             "begin":7,
             "end":51
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":912000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"fe04b996dd8459d06aa4d1af97273cc6",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `ArticleCommentForm` has 35 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/components/ArticleCommentForm.jsx",
          "lines":{
             "begin":5,
             "end":44
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":840000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"83db3d9a00b48719694177fc0fb5b1d9",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `Navbar` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/components/Navbar.jsx",
          "lines":{
             "begin":5,
             "end":60
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1272000,
       "severity":"major",
       "type":"issue"
    },
    {
       "engine_name":"structure",
       "fingerprint":"2fcd2f704eceeb2a1c245e102091df38",
       "categories":[
          "Complexity"
       ],
       "check_name":"method_lines",
       "content":{
          "body":""
       },
       "description":"Function `FollowAuthorButton` has 42 lines of code (exceeds 25 allowed). Consider refactoring.",
       "location":{
          "path":"src/components/FollowAuthorButton.jsx",
          "lines":{
             "begin":7,
             "end":55
          }
       },
       "other_locations":[
          
       ],
       "remediation_points":1008000,
       "severity":"minor",
       "type":"issue"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"5175063f7f1b643371ddf71dee05bebc",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Editor.jsx",
          "lines":{
             "begin":56,
             "end":63
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"5175063f7f1b643371ddf71dee05bebc",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Editor.jsx",
          "lines":{
             "begin":64,
             "end":71
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"c6a5b14c6f45740d590412813957eff9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Auth.jsx",
          "lines":{
             "begin":49,
             "end":56
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"c6a5b14c6f45740d590412813957eff9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Auth.jsx",
          "lines":{
             "begin":58,
             "end":60
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"c6a5b14c6f45740d590412813957eff9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Auth.jsx",
          "lines":{
             "begin":61,
             "end":68
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"04da0d3e779aab9749b31f313017a0f9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":50,
             "end":52
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"04da0d3e779aab9749b31f313017a0f9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":53,
             "end":60
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"04da0d3e779aab9749b31f313017a0f9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":70,
             "end":72
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":73,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"04da0d3e779aab9749b31f313017a0f9",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 9 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":73,
             "end":80
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":49,
                "end":56
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":58,
                "end":60
             }
          },
          {
             "path":"src/pages/Auth.jsx",
             "lines":{
                "begin":61,
                "end":68
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":56,
                "end":63
             }
          },
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":64,
                "end":71
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":50,
                "end":52
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":53,
                "end":60
             }
          },
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":70,
                "end":72
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"3a287b1eb6276b0c9493b941cbe1ca76",
       "type":"issue",
       "check_name":"identical-code",
       "description":"Identical blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Editor.jsx",
          "lines":{
             "begin":17,
             "end":33
          }
       },
       "remediation_points":510000,
       "other_locations":[
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":18,
                "end":35
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 52**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"8a5616f4fc29fc75c84cee2606956a18",
       "type":"issue",
       "check_name":"identical-code",
       "description":"Identical blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":18,
             "end":35
          }
       },
       "remediation_points":510000,
       "other_locations":[
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":17,
                "end":33
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 52**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"9dfcd9a1e16fbb7c60cfd36431b9e3c4",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/ArticleMeta.jsx",
          "lines":{
             "begin":19,
             "end":24
          }
       },
       "remediation_points":1770000,
       "other_locations":[
          {
             "path":"src/components/ArticlePreview.jsx",
             "lines":{
                "begin":16,
                "end":21
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 94**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"bc16a5f48a2df63983fc3e619122cd72",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/ArticlePreview.jsx",
          "lines":{
             "begin":16,
             "end":21
          }
       },
       "remediation_points":1770000,
       "other_locations":[
          {
             "path":"src/components/ArticleMeta.jsx",
             "lines":{
                "begin":19,
                "end":24
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 94**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"2521b978e89c203dbaeba0d4c6b048da",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/server.js",
          "lines":{
             "begin":237,
             "end":247
          }
       },
       "remediation_points":1470000,
       "other_locations":[
          {
             "path":"src/server.js",
             "lines":{
                "begin":249,
                "end":259
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"2521b978e89c203dbaeba0d4c6b048da",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/server.js",
          "lines":{
             "begin":249,
             "end":259
          }
       },
       "remediation_points":1470000,
       "other_locations":[
          {
             "path":"src/server.js",
             "lines":{
                "begin":237,
                "end":247
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 84**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"5f8d82dcdd9241521ec18c6b1116f076",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/Navbar.jsx",
          "lines":{
             "begin":22,
             "end":27
          }
       },
       "remediation_points":690000,
       "other_locations":[
          {
             "path":"src/components/Navbar.jsx",
             "lines":{
                "begin":28,
                "end":33
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"5f8d82dcdd9241521ec18c6b1116f076",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/Navbar.jsx",
          "lines":{
             "begin":28,
             "end":33
          }
       },
       "remediation_points":690000,
       "other_locations":[
          {
             "path":"src/components/Navbar.jsx",
             "lines":{
                "begin":22,
                "end":27
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"major"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"c10c6892a6fcfc169ce9dd2cccbd6acb",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Editor.jsx",
          "lines":{
             "begin":72,
             "end":80
          }
       },
       "remediation_points":510000,
       "other_locations":[
          {
             "path":"src/pages/Settings.jsx",
             "lines":{
                "begin":61,
                "end":69
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 52**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"392b9cb3862e38c6f822dfb3984e2a4d",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/pages/Settings.jsx",
          "lines":{
             "begin":61,
             "end":69
          }
       },
       "remediation_points":510000,
       "other_locations":[
          {
             "path":"src/pages/Editor.jsx",
             "lines":{
                "begin":72,
                "end":80
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 52**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"0833a3bfd0a7492d41bb5d607693a9e3",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/ArticleMeta.jsx",
          "lines":{
             "begin":16,
             "end":18
          }
       },
       "remediation_points":480000,
       "other_locations":[
          {
             "path":"src/components/ArticlePreview.jsx",
             "lines":{
                "begin":13,
                "end":15
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 51**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"eca51dcd0bda958ea3ac509c233b8d2a",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/ArticlePreview.jsx",
          "lines":{
             "begin":13,
             "end":15
          }
       },
       "remediation_points":480000,
       "other_locations":[
          {
             "path":"src/components/ArticleMeta.jsx",
             "lines":{
                "begin":16,
                "end":18
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 51**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"4dff34245bf25bf8a346d63e31dd06a6",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/Navbar.jsx",
          "lines":{
             "begin":44,
             "end":48
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/components/Navbar.jsx",
             "lines":{
                "begin":49,
                "end":53
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"duplication",
       "fingerprint":"4dff34245bf25bf8a346d63e31dd06a6",
       "type":"issue",
       "check_name":"similar-code",
       "description":"Similar blocks of code found in 2 locations. Consider refactoring.",
       "categories":[
          "Duplication"
       ],
       "location":{
          "path":"src/components/Navbar.jsx",
          "lines":{
             "begin":49,
             "end":53
          }
       },
       "remediation_points":300000,
       "other_locations":[
          {
             "path":"src/components/Navbar.jsx",
             "lines":{
                "begin":44,
                "end":48
             }
          }
       ],
       "content":{
          "body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 45**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"
       },
       "severity":"minor"
    },
    {
       "engine_name":"csslint",
       "fingerprint":"ac51878fa3b855c79922dedf83b50f25",
       "type":"issue",
       "check_name":"outline-none",
       "description":"Outlines shouldn't be hidden unless other visual changes are made.",
       "categories":[
          "Style"
       ],
       "remediation_points":50000,
       "location":{
          "path":"src/App.css",
          "positions":{
             "begin":{
                "line":1,
                "column":1
             },
             "end":{
                "line":1,
                "column":1
             }
          }
       },
       "severity":"minor"
    },
    {
       "engine_name":"eslint",
       "fingerprint":"64a45488caa16257aa39503858e15323",
       "type":"issue",
       "categories":[
          "Clarity"
       ],
       "check_name":"spaced-comment",
       "description":"Expected exception block, space or tab after '//' in comment.",
       "content":{
          "body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line or `*/` if the comment is a single line comment.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"*\"] } }] */\n\n/******** COMMENT *******/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"*\"] } }] */\n\n/***************/\n\n/********\nCOMMENT\n*******/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"
       },
       "location":{
          "path":"cypress/plugins/index.js",
          "positions":{
             "begin":{
                "line":1,
                "column":1
             },
             "end":{
                "line":1,
                "column":1
             }
          }
       },
       "remediation_points":50000,
       "severity":"minor"
    },
    {
       "engine_name":"eslint",
       "fingerprint":"86973dc9347553f812417c6cdd4e7ac9",
       "type":"issue",
       "categories":[
          "Bug Risk"
       ],
       "check_name":"no-shadow",
       "description":"'user' is already declared in the upper scope.",
       "content":{
          "body":"# disallow variable declarations from shadowing variables declared in the outer scope (no-shadow)\n\nShadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:\n\n```js\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n```\n\nIn this case, the variable `a` inside of `b()` is shadowing the variable `a` in the global scope. This can cause confusion while reading the code and it's impossible to access the global variable.\n\n## Rule Details\n\nThis rule aims to eliminate shadowed variable declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-shadow: \"error\"*/\n/*eslint-env es6*/\n\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n\nvar b = function () {\n    var a = 10;\n}\n\nfunction b(a) {\n    a = 10;\n}\nb(a);\n\nif (true) {\n    let a = 5;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with properties `\"builtinGlobals\"`, `\"hoist\"` and `\"allow\"`.\n\n```json\n{\n    \"no-shadow\": [\"error\", { \"builtinGlobals\": false, \"hoist\": \"functions\", \"allow\": [] }]\n}\n```\n\n### builtinGlobals\n\nThe `builtinGlobals` option is `false` by default.\nIf it is `true`, the rule prevents shadowing of built-in global variables: `Object`, `Array`, `Number`, and so on.\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"builtinGlobals\": true }]*/\n\nfunction foo() {\n    var Object = 0;\n}\n```\n\n### hoist\n\nThe `hoist` option has three settings:\n\n* `functions` (by default) - reports shadowing before the outer functions are defined.\n* `all` - reports all shadowing before the outer variables/functions are defined.\n* `never` - never report shadowing before the outer variables/functions are defined.\n\n#### hoist: functions\n\nExamples of **incorrect** code for the default `{ \"hoist\": \"functions\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let b = 6;\n}\n\nfunction b() {}\n```\n\nAlthough `let b` in the `if` statement is before the *function* declaration in the outer scope, it is incorrect.\n\nExamples of **correct** code for the default `{ \"hoist\": \"functions\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n}\n\nlet a = 5;\n```\n\nBecause `let a` in the `if` statement is before the *variable* declaration in the outer scope, it is correct.\n\n#### hoist: all\n\nExamples of **incorrect** code for the `{ \"hoist\": \"all\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"all\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\n#### hoist: never\n\nExamples of **correct** code for the `{ \"hoist\": \"never\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"never\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\nBecause `let a` and `let b` in the `if` statement are before the declarations in the outer scope, they are correct.\n\n### allow\n\nThe `allow` option is an array of identifier names for which shadowing is allowed. For example, `\"resolve\"`, `\"reject\"`, `\"done\"`, `\"cb\"`.\n\nExamples of **correct** code for the `{ \"allow\": [\"done\"] }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"allow\": [\"done\"] }]*/\n/*eslint-env es6*/\n\nimport async from 'async';\n\nfunction foo(done) {\n  async.map([1, 2], function (e, done) {\n    done(null, e * 2)\n  }, done);\n}\n\nfoo(function (err, result) {\n  console.log({ err, result });\n});\n```\n\n## Further Reading\n\n* [Variable Shadowing](https://en.wikipedia.org/wiki/Variable_shadowing)\n\n## Related Rules\n\n* [no-shadow-restricted-names](no-shadow-restricted-names.md)\nSource: http://eslint.org/docs/rules/\n"
       },
       "location":{
          "path":"src/server.js",
          "positions":{
             "begin":{
                "line":126,
                "column":39
             },
             "end":{
                "line":126,
                "column":39
             }
          }
       },
       "remediation_points":50000,
       "severity":"minor"
    },
    {
       "engine_name":"eslint",
       "fingerprint":"86973dc9347553f812417c6cdd4e7ac9",
       "type":"issue",
       "categories":[
          "Bug Risk"
       ],
       "check_name":"no-shadow",
       "description":"'user' is already declared in the upper scope.",
       "content":{
          "body":"# disallow variable declarations from shadowing variables declared in the outer scope (no-shadow)\n\nShadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:\n\n```js\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n```\n\nIn this case, the variable `a` inside of `b()` is shadowing the variable `a` in the global scope. This can cause confusion while reading the code and it's impossible to access the global variable.\n\n## Rule Details\n\nThis rule aims to eliminate shadowed variable declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-shadow: \"error\"*/\n/*eslint-env es6*/\n\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n\nvar b = function () {\n    var a = 10;\n}\n\nfunction b(a) {\n    a = 10;\n}\nb(a);\n\nif (true) {\n    let a = 5;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with properties `\"builtinGlobals\"`, `\"hoist\"` and `\"allow\"`.\n\n```json\n{\n    \"no-shadow\": [\"error\", { \"builtinGlobals\": false, \"hoist\": \"functions\", \"allow\": [] }]\n}\n```\n\n### builtinGlobals\n\nThe `builtinGlobals` option is `false` by default.\nIf it is `true`, the rule prevents shadowing of built-in global variables: `Object`, `Array`, `Number`, and so on.\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"builtinGlobals\": true }]*/\n\nfunction foo() {\n    var Object = 0;\n}\n```\n\n### hoist\n\nThe `hoist` option has three settings:\n\n* `functions` (by default) - reports shadowing before the outer functions are defined.\n* `all` - reports all shadowing before the outer variables/functions are defined.\n* `never` - never report shadowing before the outer variables/functions are defined.\n\n#### hoist: functions\n\nExamples of **incorrect** code for the default `{ \"hoist\": \"functions\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let b = 6;\n}\n\nfunction b() {}\n```\n\nAlthough `let b` in the `if` statement is before the *function* declaration in the outer scope, it is incorrect.\n\nExamples of **correct** code for the default `{ \"hoist\": \"functions\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n}\n\nlet a = 5;\n```\n\nBecause `let a` in the `if` statement is before the *variable* declaration in the outer scope, it is correct.\n\n#### hoist: all\n\nExamples of **incorrect** code for the `{ \"hoist\": \"all\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"all\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\n#### hoist: never\n\nExamples of **correct** code for the `{ \"hoist\": \"never\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"never\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\nBecause `let a` and `let b` in the `if` statement are before the declarations in the outer scope, they are correct.\n\n### allow\n\nThe `allow` option is an array of identifier names for which shadowing is allowed. For example, `\"resolve\"`, `\"reject\"`, `\"done\"`, `\"cb\"`.\n\nExamples of **correct** code for the `{ \"allow\": [\"done\"] }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"allow\": [\"done\"] }]*/\n/*eslint-env es6*/\n\nimport async from 'async';\n\nfunction foo(done) {\n  async.map([1, 2], function (e, done) {\n    done(null, e * 2)\n  }, done);\n}\n\nfoo(function (err, result) {\n  console.log({ err, result });\n});\n```\n\n## Further Reading\n\n* [Variable Shadowing](https://en.wikipedia.org/wiki/Variable_shadowing)\n\n## Related Rules\n\n* [no-shadow-restricted-names](no-shadow-restricted-names.md)\nSource: http://eslint.org/docs/rules/\n"
       },
       "location":{
          "path":"src/server.js",
          "positions":{
             "begin":{
                "line":133,
                "column":27
             },
             "end":{
                "line":133,
                "column":27
             }
          }
       },
       "remediation_points":50000,
       "severity":"minor"
    }
 ]